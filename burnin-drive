#!/usr/bin/env python3

# burnin-drive
#
# usage: burnin-drive [-h] [-d DIR] [-l LOG] [-y] [-m | -r] drive
#
# Burnin a drive with SMART tests and badblocks
#
# positional arguments:
#   drive
#
# optional arguments:
#   -h, --help         show this help message and exit
#   -d DIR, --dir DIR  specify the output directory for the results
#   -l LOG, --log LOG  specify the filename for the results
#   -y, --yes          confirm consent to erase drive
#   -m, --dry-run      perform a dry run (default)
#   -r, --run          perform a real run
#
# MIT License
#
# Copyright (c) 2020 Samuel Kadolph
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from datetime import datetime, timezone

import argparse
import errno
import os
import re
import shutil
import signal
import subprocess
import sys
import time

SMART_LONG_POLL = 15*60
SMART_SHORT_POLL = 30

class ProcessError(Exception):
  def __init__(self, message):
    self.message = message

def clean_smartctl(output):
  return os.linesep.join([s for s in output.splitlines()[4:] if s != ""])

def find_make(smartinfo):
  match = re.search(r"^Vendor: +(\w+)$", smartinfo, re.MULTILINE)
  if match:
    return match.group(1)

  match = re.search(r"^Model Family: +(\w+).*$", smartinfo, re.MULTILINE)
  if match:
    return match.group(1)

  match = re.search(r"^Device Model: +(\w+).*$", smartinfo, re.MULTILINE)
  if match:
    return match.group(1)

  match = re.search(r"^Model Number: +(\w+).*$", smartinfo, re.MULTILINE)
  if match:
    return match.group(1)

  return None

def find_model(smartinfo):
  match = re.search(r"^Product: +([\w-]+)$", smartinfo, re.MULTILINE)
  if match:
    return match.group(1)

  match = re.search(r"^Device Model: +(?:[\w-]+ +)?([\w-]+)$", smartinfo, re.MULTILINE)
  if match:
    return match.group(1)

  match = re.search(r"^Model Number: +(?:[\w-]+ +)?([\w-]+)$", smartinfo, re.MULTILINE)
  if match:
    return match.group(1)

  return None

def find_serial(smartinfo):
  match = re.search(r"^Serial [Nn]umber: +([\w-]+)$", smartinfo, re.MULTILINE)
  if match:
    return match.group(1)

  return None

def get_time():
  return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S %Z")

def handle_interrupt(sig, frame):
  print("interrupted", file=sys.stderr)
  exit(1)

def print_msg(message):
  tee(re.sub(r"^", get_time() + " | ", message, flags=re.MULTILINE) + "\n")

def run_badblocks():
  print_msg("===== Start badblocks on %s" % dev)

  if run:
    run_badblocks_process("-o", bb_file_path, dev)
  else:
    print_msg("Not running badblocks because this is a dry run")

  print_msg("===== Finish badblocks on %s" % dev)

def run_badblocks_process(*args):
  proc = subprocess.Popen(["badblocks", "-svw", "-b", "4096"] + list(args), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
  start_of_line = True

  while proc.poll() is None:
    data = proc.stdout.read1()
    string = data.decode("UTF-8")
    string = string.replace("set_o_direct: Inappropriate ioctl for device\n", "")
    lines = string.split("\n")

    for n, line in enumerate(lines):
      if start_of_line:
        tee("%s | " % get_time())
        start_of_line = False

      if line != "":
        safe_line = re.sub(r" *[\d.]+% done, [\d:]+ elapsed\. \(.* errors\)", "", line)
        safe_line = re.sub(r"\x08+", "", safe_line)

        if sys.stdout.isatty():
          sys.stdout.write(line)
          sys.stdout.flush()
        else:
          sys.stdout.write(safe_line)
          sys.stdout.flush()

        log_file.write(safe_line)
        log_file.flush()

      if n + 1 < len(lines):
        tee("\n")
        start_of_line = True

  if proc.returncode != 0:
    if not start_of_line:
      tee("\n")

    raise ProcessError("badblocks failed")

def run_smart_test(type):
  print_msg("===== Start SMART %s Test on %s" % (type.upper(), dev))

  if run:
    print_msg(clean_smartctl(run_smartctl_process("--test", type, dev)))

    wait_for_smart_test(type)

    print_msg("SMART Test finished")
  else:
    print_msg("Not running SMART test because this is a dry run")

  show_smart_data()

  print_msg("===== Finish SMART %s Test on %s" % (type.upper(), dev))

def run_smartctl_process(*args):
  proc = subprocess.run(["smartctl"] + list(args), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
  output = proc.stdout.decode(sys.getdefaultencoding())

  # if proc.returncode is not 0:
  #   raise ProcessError(output + "smartctl failed")

  return output

def show_smart_data():
  print_msg(clean_smartctl(run_smartctl_process("--health", dev)))
  print_msg(clean_smartctl(run_smartctl_process("--attributes", dev)))
  print_msg(clean_smartctl(run_smartctl_process("--log", "error", dev)))
  print_msg(clean_smartctl(run_smartctl_process("--log", "selftest", dev)))

def tee(string):
  sys.stdout.write(string)
  sys.stdout.flush()
  log_file.write(string)
  log_file.flush()

def wait_for_smart_test(type):
  print_msg("Waiting for SMART Test to finish")

  while True:
    status = run_smartctl_process("--capabilities", dev)

    if "Self-test execution status" in status:
      if "Self-test routine in progress" not in status:
        break
    else:
      status = run_smartctl_process("--log", "selftest", dev)

      if re.search(r"^#\s1\s.*(Aborted|Completed|Failed)", status, re.MULTILINE):
        break

    if type == "long":
      time.sleep(SMART_LONG_POLL)
    else:
      time.sleep(SMART_SHORT_POLL)

signal.signal(signal.SIGINT, handle_interrupt)

parser = argparse.ArgumentParser(description="Burnin a drive with SMART tests and badblocks")
parser.add_argument("-d", "--dir", type=str, help="specify the output directory for the results")
parser.add_argument("-l", "--log", type=str, help="specify the filename for the results")
parser.add_argument("-y", "--yes", action="store_true", help="confirm consent to erase drive")
group = parser.add_mutually_exclusive_group()
group.add_argument("-m", "--dry-run", action="store_true", help="perform a dry run (default)")
group.add_argument("-r", "--run", action="store_true", help="perform a real run")
parser.add_argument("drive")
args = parser.parse_args()

if os.geteuid() != 0:
  print("%s must be run as root" % parser.pro, file=sys.stderr)
  exit(1)

if not shutil.which("smartctl"):
  print("could not find smartctl, please install it", file=sys.stderr)
  exit(1)

if not shutil.which("badblocks"):
  print("could not find badblocks, please install it", file=sys.stderr)
  exit(1)

dev = args.drive

if not os.path.exists(dev):
  print("could not find device: '%s'" % dev, file=sys.stderr)
  exit(1)

smartinfo = run_smartctl_process("--info", dev)

make = find_make(smartinfo)
model = find_model(smartinfo)
serial = find_serial(smartinfo)

if not make or not model or not serial:
  print("unable to determine drive make, model, and serial for '%s" % dev, file=sys.stderr)
  exit(1)

if not args.yes:
  print("This script will erase all data on $dev. Any other processes trying to use it will fail.")
  print("The make, model, and serial for this drive is %s %s %s. Confirm this is the right drive." % (make, model, serial))
  print("And you really really really should be running this inside of screen or tmux.")
  # TODO getch

dir = args.dir if args.dir else os.getcwd()

if args.log:
  bb_file_path = os.path.join(dir, "%s.badblocks" % args.log)
  log_file_path = os.path.join(dir, "%s.log" % args.log)
else:
  bb_file_path = os.path.join(dir, "burnin_%s_%s_%s.badblocks" % (make, model, serial))
  log_file_path = os.path.join(dir, "burnin_%s_%s_%s.log" % (make, model, serial))

try:
  os.makedirs(dir)
except OSError as e:
  if e.errno != errno.EEXIST:
      raise

try:
  os.remove(bb_file_path)
except OSError:
  pass

try:
  os.remove(log_file_path)
except OSError:
  pass

log_file = open(log_file_path, "w")
run = not args.dry_run and args.run

print_msg("burnin-drive")
print_msg("https://github.com/samuelkadolph/burnin-drive")

print_msg("===== Run Info")
print_msg("Device: %s" % dev)
print_msg("Make: %s" % make)
print_msg("Model: %s" % model)
print_msg("Serial: %s" % serial)
print_msg("badblocks File: %s" % bb_file_path)
print_msg("Log File: %s" % log_file_path)
print_msg("Dry Run: %s" % str(not run))

print_msg("===== Raw SMART Info")
print_msg(clean_smartctl(smartinfo))

try:
  run_smart_test("short")
  run_badblocks()
  run_smart_test("short")
  run_smart_test("long")
except ProcessError as e:
  print_msg(e.message)
  exit(1)
